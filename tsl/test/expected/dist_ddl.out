-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- Need to be super user to create extension and add data nodes
\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
-- Support for execute_sql_and_filter_server_name_on_error()
\unset ECHO
psql:include/remote_exec.sql:5: NOTICE:  schema "test" already exists, skipping
psql:include/filter_exec.sql:5: NOTICE:  schema "test" already exists, skipping
\set DATA_NODE_1 :TEST_DBNAME _1
\set DATA_NODE_2 :TEST_DBNAME _2
\set DATA_NODE_3 :TEST_DBNAME _3
CREATE SCHEMA some_schema AUTHORIZATION :ROLE_1;
SELECT node_name, database, node_created, database_created, extension_created
FROM (
  SELECT (add_data_node(name, host => 'localhost', DATABASE => name)).*
  FROM (VALUES (:'DATA_NODE_1'), (:'DATA_NODE_2'), (:'DATA_NODE_3')) v(name)
) a;
   node_name   |   database    | node_created | database_created | extension_created 
---------------+---------------+--------------+------------------+-------------------
 db_dist_ddl_1 | db_dist_ddl_1 | t            | t                | t
 db_dist_ddl_2 | db_dist_ddl_2 | t            | t                | t
 db_dist_ddl_3 | db_dist_ddl_3 | t            | t                | t
(3 rows)

GRANT USAGE ON FOREIGN SERVER :DATA_NODE_1, :DATA_NODE_2, :DATA_NODE_3 TO PUBLIC;
GRANT CREATE ON SCHEMA public TO :ROLE_1;
-- Presence of non-distributed hypertables on data nodes should not cause issues
CALL distributed_exec('CREATE TABLE local(time timestamptz, measure int)', ARRAY[:'DATA_NODE_1',:'DATA_NODE_3']);
CALL distributed_exec($$ SELECT create_hypertable('local', 'time') $$, ARRAY[:'DATA_NODE_1',:'DATA_NODE_3']);
-- Import testsupport.sql file to data nodes
\unset ECHO
SET ROLE :ROLE_1;
CREATE TABLE disttable(time timestamptz, device int, color int CONSTRAINT color_check CHECK (color > 0), temp float);
CREATE UNIQUE INDEX disttable_pk ON disttable(time, temp);
-- CREATE TABLE
SELECT * FROM create_distributed_hypertable('disttable', 'time', 'temp', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
             1 | public      | disttable  | t
(1 row)

SELECT * FROM test.show_columns('disttable');
 Column |           Type           | NotNull 
--------+--------------------------+---------
 time   | timestamp with time zone | t
 device | integer                  | f
 color  | integer                  | f
 temp   | double precision         | f
(4 rows)

SELECT * FROM test.show_constraints('disttable');
 Constraint  | Type | Columns | Index |    Expr     | Deferrable | Deferred | Validated 
-------------+------+---------+-------+-------------+------------+----------+-----------
 color_check | c    | {color} | -     | (color > 0) | f          | f        | t
(1 row)

SELECT * FROM test.show_indexes('disttable');
          Index          |   Columns   | Expr | Unique | Primary | Exclusion | Tablespace 
-------------------------+-------------+------+--------+---------+-----------+------------
 disttable_pk            | {time,temp} |      | t      | f       | f         | 
 disttable_temp_time_idx | {temp,time} |      | f      | f       | f         | 
 disttable_time_idx      | {time}      |      | f      | f       | f         | 
(3 rows)

SELECT * FROM test.show_triggers('disttable');
      Trigger      | Type |               Function                
-------------------+------+---------------------------------------
 ts_insert_blocker |    7 | _timescaledb_functions.insert_blocker
(1 row)

SELECT * FROM test.remote_exec(NULL, $$
SELECT * FROM test.show_columns('disttable');
SELECT * FROM test.show_constraints('disttable');
SELECT * FROM test.show_indexes('disttable');
SELECT * FROM test.show_triggers('disttable');
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_columns('disttable')
NOTICE:  [db_dist_ddl_1]:
Column|Type                    |NotNull
------+------------------------+-------
time  |timestamp with time zone|t      
device|integer                 |f      
color |integer                 |f      
temp  |double precision        |f      
(4 rows)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_constraints('disttable')
NOTICE:  [db_dist_ddl_1]:
Constraint |Type|Columns|Index|Expr       |Deferrable|Deferred|Validated
-----------+----+-------+-----+-----------+----------+--------+---------
color_check|c   |{color}|-    |(color > 0)|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_indexes('disttable')
NOTICE:  [db_dist_ddl_1]:
Index                  |Columns    |Expr|Unique|Primary|Exclusion|Tablespace
-----------------------+-----------+----+------+-------+---------+----------
disttable_pk           |{time,temp}|    |t     |f      |f        |          
disttable_temp_time_idx|{temp,time}|    |f     |f      |f        |          
disttable_time_idx     |{time}     |    |f     |f      |f        |          
(3 rows)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_triggers('disttable')
NOTICE:  [db_dist_ddl_1]:
Trigger          |Type|Function                             
-----------------+----+-------------------------------------
ts_insert_blocker|   7|_timescaledb_functions.insert_blocker
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_columns('disttable')
NOTICE:  [db_dist_ddl_2]:
Column|Type                    |NotNull
------+------------------------+-------
time  |timestamp with time zone|t      
device|integer                 |f      
color |integer                 |f      
temp  |double precision        |f      
(4 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_constraints('disttable')
NOTICE:  [db_dist_ddl_2]:
Constraint |Type|Columns|Index|Expr       |Deferrable|Deferred|Validated
-----------+----+-------+-----+-----------+----------+--------+---------
color_check|c   |{color}|-    |(color > 0)|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_indexes('disttable')
NOTICE:  [db_dist_ddl_2]:
Index                  |Columns    |Expr|Unique|Primary|Exclusion|Tablespace
-----------------------+-----------+----+------+-------+---------+----------
disttable_pk           |{time,temp}|    |t     |f      |f        |          
disttable_temp_time_idx|{temp,time}|    |f     |f      |f        |          
disttable_time_idx     |{time}     |    |f     |f      |f        |          
(3 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_triggers('disttable')
NOTICE:  [db_dist_ddl_2]:
Trigger          |Type|Function                             
-----------------+----+-------------------------------------
ts_insert_blocker|   7|_timescaledb_functions.insert_blocker
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_columns('disttable')
NOTICE:  [db_dist_ddl_3]:
Column|Type                    |NotNull
------+------------------------+-------
time  |timestamp with time zone|t      
device|integer                 |f      
color |integer                 |f      
temp  |double precision        |f      
(4 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_constraints('disttable')
NOTICE:  [db_dist_ddl_3]:
Constraint |Type|Columns|Index|Expr       |Deferrable|Deferred|Validated
-----------+----+-------+-----+-----------+----------+--------+---------
color_check|c   |{color}|-    |(color > 0)|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_indexes('disttable')
NOTICE:  [db_dist_ddl_3]:
Index                  |Columns    |Expr|Unique|Primary|Exclusion|Tablespace
-----------------------+-----------+----+------+-------+---------+----------
disttable_pk           |{time,temp}|    |t     |f      |f        |          
disttable_temp_time_idx|{temp,time}|    |f     |f      |f        |          
disttable_time_idx     |{time}     |    |f     |f      |f        |          
(3 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_triggers('disttable')
NOTICE:  [db_dist_ddl_3]:
Trigger          |Type|Function                             
-----------------+----+-------------------------------------
ts_insert_blocker|   7|_timescaledb_functions.insert_blocker
(1 row)


 remote_exec 
-------------
 
(1 row)

-- ADD CONSTRAINT
ALTER TABLE disttable ADD CONSTRAINT device_check CHECK (device > 0);
SELECT * FROM test.show_constraints('disttable');
  Constraint  | Type | Columns  | Index |     Expr     | Deferrable | Deferred | Validated 
--------------+------+----------+-------+--------------+------------+----------+-----------
 color_check  | c    | {color}  | -     | (color > 0)  | f          | f        | t
 device_check | c    | {device} | -     | (device > 0) | f          | f        | t
(2 rows)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_constraints('disttable') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_constraints('disttable') 
NOTICE:  [db_dist_ddl_1]:
Constraint  |Type|Columns |Index|Expr        |Deferrable|Deferred|Validated
------------+----+--------+-----+------------+----------+--------+---------
color_check |c   |{color} |-    |(color > 0) |f         |f       |t        
device_check|c   |{device}|-    |(device > 0)|f         |f       |t        
(2 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_constraints('disttable') 
NOTICE:  [db_dist_ddl_2]:
Constraint  |Type|Columns |Index|Expr        |Deferrable|Deferred|Validated
------------+----+--------+-----+------------+----------+--------+---------
color_check |c   |{color} |-    |(color > 0) |f         |f       |t        
device_check|c   |{device}|-    |(device > 0)|f         |f       |t        
(2 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_constraints('disttable') 
NOTICE:  [db_dist_ddl_3]:
Constraint  |Type|Columns |Index|Expr        |Deferrable|Deferred|Validated
------------+----+--------+-----+------------+----------+--------+---------
color_check |c   |{color} |-    |(color > 0) |f         |f       |t        
device_check|c   |{device}|-    |(device > 0)|f         |f       |t        
(2 rows)


 remote_exec 
-------------
 
(1 row)

-- DROP CONSTRAINT
ALTER TABLE disttable DROP CONSTRAINT device_check;
SELECT * FROM test.show_constraints('disttable');
 Constraint  | Type | Columns | Index |    Expr     | Deferrable | Deferred | Validated 
-------------+------+---------+-------+-------------+------------+----------+-----------
 color_check | c    | {color} | -     | (color > 0) | f          | f        | t
(1 row)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_constraints('disttable') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_constraints('disttable') 
NOTICE:  [db_dist_ddl_1]:
Constraint |Type|Columns|Index|Expr       |Deferrable|Deferred|Validated
-----------+----+-------+-----+-----------+----------+--------+---------
color_check|c   |{color}|-    |(color > 0)|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_constraints('disttable') 
NOTICE:  [db_dist_ddl_2]:
Constraint |Type|Columns|Index|Expr       |Deferrable|Deferred|Validated
-----------+----+-------+-----+-----------+----------+--------+---------
color_check|c   |{color}|-    |(color > 0)|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_constraints('disttable') 
NOTICE:  [db_dist_ddl_3]:
Constraint |Type|Columns|Index|Expr       |Deferrable|Deferred|Validated
-----------+----+-------+-----+-----------+----------+--------+---------
color_check|c   |{color}|-    |(color > 0)|f         |f       |t        
(1 row)


 remote_exec 
-------------
 
(1 row)

-- DROP CONSTRAINT pre-created
ALTER TABLE disttable DROP CONSTRAINT color_check;
SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_constraints('disttable') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_constraints('disttable') 
NOTICE:  [db_dist_ddl_1]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_constraints('disttable') 
NOTICE:  [db_dist_ddl_2]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_constraints('disttable') 
NOTICE:  [db_dist_ddl_3]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


 remote_exec 
-------------
 
(1 row)

-- DROP COLUMN
ALTER TABLE disttable DROP COLUMN color;
SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_columns('disttable') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_columns('disttable') 
NOTICE:  [db_dist_ddl_1]:
Column|Type                    |NotNull
------+------------------------+-------
time  |timestamp with time zone|t      
device|integer                 |f      
temp  |double precision        |f      
(3 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_columns('disttable') 
NOTICE:  [db_dist_ddl_2]:
Column|Type                    |NotNull
------+------------------------+-------
time  |timestamp with time zone|t      
device|integer                 |f      
temp  |double precision        |f      
(3 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_columns('disttable') 
NOTICE:  [db_dist_ddl_3]:
Column|Type                    |NotNull
------+------------------------+-------
time  |timestamp with time zone|t      
device|integer                 |f      
temp  |double precision        |f      
(3 rows)


 remote_exec 
-------------
 
(1 row)

-- ADD COLUMN
ALTER TABLE disttable ADD COLUMN description text;
SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_columns('disttable') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_columns('disttable') 
NOTICE:  [db_dist_ddl_1]:
Column     |Type                    |NotNull
-----------+------------------------+-------
time       |timestamp with time zone|t      
device     |integer                 |f      
temp       |double precision        |f      
description|text                    |f      
(4 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_columns('disttable') 
NOTICE:  [db_dist_ddl_2]:
Column     |Type                    |NotNull
-----------+------------------------+-------
time       |timestamp with time zone|t      
device     |integer                 |f      
temp       |double precision        |f      
description|text                    |f      
(4 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_columns('disttable') 
NOTICE:  [db_dist_ddl_3]:
Column     |Type                    |NotNull
-----------+------------------------+-------
time       |timestamp with time zone|t      
device     |integer                 |f      
temp       |double precision        |f      
description|text                    |f      
(4 rows)


 remote_exec 
-------------
 
(1 row)

-- CREATE INDEX
CREATE INDEX disttable_description_idx ON disttable (description);
SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_indexes('disttable') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_indexes('disttable') 
NOTICE:  [db_dist_ddl_1]:
Index                    |Columns      |Expr|Unique|Primary|Exclusion|Tablespace
-------------------------+-------------+----+------+-------+---------+----------
disttable_description_idx|{description}|    |f     |f      |f        |          
disttable_pk             |{time,temp}  |    |t     |f      |f        |          
disttable_temp_time_idx  |{temp,time}  |    |f     |f      |f        |          
disttable_time_idx       |{time}       |    |f     |f      |f        |          
(4 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_indexes('disttable') 
NOTICE:  [db_dist_ddl_2]:
Index                    |Columns      |Expr|Unique|Primary|Exclusion|Tablespace
-------------------------+-------------+----+------+-------+---------+----------
disttable_description_idx|{description}|    |f     |f      |f        |          
disttable_pk             |{time,temp}  |    |t     |f      |f        |          
disttable_temp_time_idx  |{temp,time}  |    |f     |f      |f        |          
disttable_time_idx       |{time}       |    |f     |f      |f        |          
(4 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_indexes('disttable') 
NOTICE:  [db_dist_ddl_3]:
Index                    |Columns      |Expr|Unique|Primary|Exclusion|Tablespace
-------------------------+-------------+----+------+-------+---------+----------
disttable_description_idx|{description}|    |f     |f      |f        |          
disttable_pk             |{time,temp}  |    |t     |f      |f        |          
disttable_temp_time_idx  |{temp,time}  |    |f     |f      |f        |          
disttable_time_idx       |{time}       |    |f     |f      |f        |          
(4 rows)


 remote_exec 
-------------
 
(1 row)

-- TRUNCATE
CREATE TABLE non_disttable1(time timestamptz);
CREATE TABLE non_disttable2(time timestamptz);
SELECT create_hypertable('non_disttable2', 'time');
NOTICE:  adding not-null constraint to column "time"
      create_hypertable      
-----------------------------
 (2,public,non_disttable2,t)
(1 row)

-- Truncating two non-distribued hypertables should be OK.
TRUNCATE non_disttable1, non_disttable2;
-- Truncating one distributed hypertable should be OK
TRUNCATE disttable;
-- RENAME TO
ALTER TABLE disttable RENAME TO disttable2;
SELECT 1 FROM pg_tables WHERE tablename = 'disttable2';
 ?column? 
----------
        1
(1 row)

\c :DATA_NODE_1
SELECT 1 FROM pg_tables WHERE tablename = 'disttable2';
 ?column? 
----------
        1
(1 row)

\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
SET ROLE :ROLE_1;
ALTER TABLE disttable2 RENAME TO disttable;
SELECT 1 FROM pg_tables WHERE tablename = 'disttable';
 ?column? 
----------
        1
(1 row)

\c :DATA_NODE_1
SELECT 1 FROM pg_tables WHERE tablename = 'disttable';
 ?column? 
----------
        1
(1 row)

\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
SET ROLE :ROLE_1;
SET timescaledb.hide_data_node_name_in_errors = 'on';
-- SET SCHEMA
\set ON_ERROR_STOP 0
ALTER TABLE disttable SET SCHEMA some_unexist_schema;
ERROR:  schema "some_unexist_schema" does not exist
\set ON_ERROR_STOP 1
-- some_schema was not created on data nodes
\set ON_ERROR_STOP 0
ALTER TABLE disttable SET SCHEMA some_schema;
ERROR:  [<hidden node name>]: schema "some_schema" does not exist
\set ON_ERROR_STOP 1
-- OWNER TO
RESET ROLE;
ALTER TABLE disttable OWNER TO :ROLE_2;
SELECT tableowner FROM pg_tables WHERE tablename = 'disttable';
 tableowner  
-------------
 test_role_2
(1 row)

SELECT * FROM test.remote_exec(NULL, $$
SELECT tableowner FROM pg_tables WHERE tablename = 'disttable';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT tableowner FROM pg_tables WHERE tablename = 'disttable'
NOTICE:  [db_dist_ddl_1]:
tableowner 
-----------
test_role_2
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT tableowner FROM pg_tables WHERE tablename = 'disttable'
NOTICE:  [db_dist_ddl_2]:
tableowner 
-----------
test_role_2
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT tableowner FROM pg_tables WHERE tablename = 'disttable'
NOTICE:  [db_dist_ddl_3]:
tableowner 
-----------
test_role_2
(1 row)


 remote_exec 
-------------
 
(1 row)

ALTER TABLE disttable OWNER TO :ROLE_1;
SET ROLE :ROLE_1;
-- Test unsupported operations on distributed hypertable
\set ON_ERROR_STOP 0
-- test set_replication_factor on non-hypertable
SELECT * FROM set_replication_factor('non_disttable1', 1);
ERROR:  table "non_disttable1" is not a hypertable
-- test set_replication_factor on non-distributed
SELECT * FROM set_replication_factor('non_disttable2', 1);
ERROR:  hypertable "non_disttable2" is not distributed
-- test set_replication_factor on NULL hypertable
SELECT * FROM set_replication_factor(NULL, 1);
ERROR:  invalid hypertable: cannot be NULL
-- Combining one distributed hypertable with any other tables should
-- be blocked since not all nodes might have all tables and we
-- currently don't rewrite the command.
TRUNCATE disttable, non_disttable1;
ERROR:  operation not supported on distributed hypertable
TRUNCATE disttable, non_disttable2;
ERROR:  operation not supported on distributed hypertable
CLUSTER disttable USING disttable_description_idx;
ERROR:  operation not supported on distributed hypertable
DROP TABLE non_disttable1, disttable;
ERROR:  cannot drop a hypertable along with other objects
DROP TABLE disttable, non_disttable2;
ERROR:  cannot drop a hypertable along with other objects
DROP TABLE disttable, disttable;
ERROR:  cannot drop a hypertable along with other objects
\set ON_ERROR_STOP 1
----------------------------------------------------------------------------------------
-- Test column type change, renaming columns, constraints, indexes, and REINDEX command.
----------------------------------------------------------------------------------------
ALTER TABLE disttable ALTER COLUMN description TYPE VARCHAR(10);
ALTER TABLE disttable ADD COLUMN float_col float;
ALTER TABLE disttable ALTER COLUMN float_col TYPE INT USING float_col::int;
\set ON_ERROR_STOP 0
-- Changing the type of a hash-partitioned column should not be supported
ALTER TABLE disttable ALTER COLUMN temp TYPE numeric;
ERROR:  cannot change the type of a hash-partitioned column
\set ON_ERROR_STOP 1
-- Should be able to change if not hash partitioned though
ALTER TABLE disttable ALTER COLUMN time TYPE timestamp;
INSERT INTO disttable VALUES
	('2017-01-01 06:01', 1, 1.2, 'test'),
	('2017-01-01 09:11', 3, 4.3, 'test'),
	('2017-01-01 08:01', 1, 7.3, 'test'),
	('2017-01-02 08:01', 2, 0.23, 'test'),
	('2018-07-02 08:01', 87, 0.0, 'test'),
	('2018-07-01 06:01', 13, 3.1, 'test'),
	('2018-07-01 09:11', 90, 10303.12, 'test'),
	('2018-07-01 08:01', 29, 64, 'test');
SELECT * FROM show_chunks('disttable');
                 show_chunks                 
---------------------------------------------
 _timescaledb_internal._dist_hyper_1_1_chunk
 _timescaledb_internal._dist_hyper_1_2_chunk
 _timescaledb_internal._dist_hyper_1_3_chunk
 _timescaledb_internal._dist_hyper_1_4_chunk
 _timescaledb_internal._dist_hyper_1_5_chunk
(5 rows)

-- Replica identity
SELECT * FROM test.remote_exec(NULL,
$$
    SELECT relname, relreplident FROM pg_class WHERE relname = 'disttable' ORDER BY relname;
    SELECT relname, relreplident FROM show_chunks('disttable') ch INNER JOIN pg_class c ON (ch = c.oid) ORDER BY relname;
$$);
NOTICE:  [db_dist_ddl_1]: 
    SELECT relname, relreplident FROM pg_class WHERE relname = 'disttable' ORDER BY relname
NOTICE:  [db_dist_ddl_1]:
relname  |relreplident
---------+------------
disttable|d           
(1 row)


NOTICE:  [db_dist_ddl_1]: 
    SELECT relname, relreplident FROM show_chunks('disttable') ch INNER JOIN pg_class c ON (ch = c.oid) ORDER BY relname
NOTICE:  [db_dist_ddl_1]:
relname              |relreplident
---------------------+------------
_dist_hyper_1_1_chunk|d           
_dist_hyper_1_2_chunk|d           
_dist_hyper_1_3_chunk|d           
_dist_hyper_1_4_chunk|d           
_dist_hyper_1_5_chunk|d           
(5 rows)


NOTICE:  [db_dist_ddl_2]: 
    SELECT relname, relreplident FROM pg_class WHERE relname = 'disttable' ORDER BY relname
NOTICE:  [db_dist_ddl_2]:
relname  |relreplident
---------+------------
disttable|d           
(1 row)


NOTICE:  [db_dist_ddl_2]: 
    SELECT relname, relreplident FROM show_chunks('disttable') ch INNER JOIN pg_class c ON (ch = c.oid) ORDER BY relname
NOTICE:  [db_dist_ddl_2]:
relname              |relreplident
---------------------+------------
_dist_hyper_1_1_chunk|d           
_dist_hyper_1_2_chunk|d           
_dist_hyper_1_3_chunk|d           
_dist_hyper_1_4_chunk|d           
_dist_hyper_1_5_chunk|d           
(5 rows)


NOTICE:  [db_dist_ddl_3]: 
    SELECT relname, relreplident FROM pg_class WHERE relname = 'disttable' ORDER BY relname
NOTICE:  [db_dist_ddl_3]:
relname  |relreplident
---------+------------
disttable|d           
(1 row)


NOTICE:  [db_dist_ddl_3]: 
    SELECT relname, relreplident FROM show_chunks('disttable') ch INNER JOIN pg_class c ON (ch = c.oid) ORDER BY relname
NOTICE:  [db_dist_ddl_3]:
relname              |relreplident
---------------------+------------
_dist_hyper_1_1_chunk|d           
_dist_hyper_1_2_chunk|d           
_dist_hyper_1_3_chunk|d           
_dist_hyper_1_4_chunk|d           
_dist_hyper_1_5_chunk|d           
(5 rows)


 remote_exec 
-------------
 
(1 row)

ALTER TABLE disttable REPLICA IDENTITY FULL;
SELECT * FROM test.remote_exec(NULL,
$$
    SELECT relname, relreplident FROM pg_class WHERE relname = 'disttable' ORDER BY relname;
    SELECT relname, relreplident FROM show_chunks('disttable') ch INNER JOIN pg_class c ON (ch = c.oid) ORDER BY relname;
$$);
NOTICE:  [db_dist_ddl_1]: 
    SELECT relname, relreplident FROM pg_class WHERE relname = 'disttable' ORDER BY relname
NOTICE:  [db_dist_ddl_1]:
relname  |relreplident
---------+------------
disttable|f           
(1 row)


NOTICE:  [db_dist_ddl_1]: 
    SELECT relname, relreplident FROM show_chunks('disttable') ch INNER JOIN pg_class c ON (ch = c.oid) ORDER BY relname
NOTICE:  [db_dist_ddl_1]:
relname              |relreplident
---------------------+------------
_dist_hyper_1_1_chunk|f           
_dist_hyper_1_2_chunk|f           
_dist_hyper_1_3_chunk|f           
_dist_hyper_1_4_chunk|f           
_dist_hyper_1_5_chunk|f           
(5 rows)


NOTICE:  [db_dist_ddl_2]: 
    SELECT relname, relreplident FROM pg_class WHERE relname = 'disttable' ORDER BY relname
NOTICE:  [db_dist_ddl_2]:
relname  |relreplident
---------+------------
disttable|f           
(1 row)


NOTICE:  [db_dist_ddl_2]: 
    SELECT relname, relreplident FROM show_chunks('disttable') ch INNER JOIN pg_class c ON (ch = c.oid) ORDER BY relname
NOTICE:  [db_dist_ddl_2]:
relname              |relreplident
---------------------+------------
_dist_hyper_1_1_chunk|f           
_dist_hyper_1_2_chunk|f           
_dist_hyper_1_3_chunk|f           
_dist_hyper_1_4_chunk|f           
_dist_hyper_1_5_chunk|f           
(5 rows)


NOTICE:  [db_dist_ddl_3]: 
    SELECT relname, relreplident FROM pg_class WHERE relname = 'disttable' ORDER BY relname
NOTICE:  [db_dist_ddl_3]:
relname  |relreplident
---------+------------
disttable|f           
(1 row)


NOTICE:  [db_dist_ddl_3]: 
    SELECT relname, relreplident FROM show_chunks('disttable') ch INNER JOIN pg_class c ON (ch = c.oid) ORDER BY relname
NOTICE:  [db_dist_ddl_3]:
relname              |relreplident
---------------------+------------
_dist_hyper_1_1_chunk|f           
_dist_hyper_1_2_chunk|f           
_dist_hyper_1_3_chunk|f           
_dist_hyper_1_4_chunk|f           
_dist_hyper_1_5_chunk|f           
(5 rows)


 remote_exec 
-------------
 
(1 row)

-- Rename column
ALTER TABLE disttable RENAME COLUMN description TO descr;
SELECT * FROM test.show_columns('disttable')
WHERE "Column"='descr';
 Column |       Type        | NotNull 
--------+-------------------+---------
 descr  | character varying | f
(1 row)

SELECT * FROM test.remote_exec(ARRAY[:'DATA_NODE_1'], $$
	   SELECT chunk.relid AS chunk_relid,
	   		  (SELECT "Column" AS col FROM test.show_columns(chunk.relid) WHERE "Column"='descr')
	   FROM (SELECT "Child" AS relid FROM test.show_subtables('disttable') LIMIT 1) chunk
$$);
NOTICE:  [db_dist_ddl_1]: 
	   SELECT chunk.relid AS chunk_relid,
	   		  (SELECT "Column" AS col FROM test.show_columns(chunk.relid) WHERE "Column"='descr')
	   FROM (SELECT "Child" AS relid FROM test.show_subtables('disttable') LIMIT 1) chunk

NOTICE:  [db_dist_ddl_1]:
chunk_relid                                |col  
-------------------------------------------+-----
_timescaledb_internal._dist_hyper_1_1_chunk|descr
(1 row)


 remote_exec 
-------------
 
(1 row)

-- Rename constraint
ALTER TABLE disttable ADD CONSTRAINT device_check CHECK (device > 0);
ALTER TABLE disttable RENAME CONSTRAINT device_check TO device_chk;
SELECT * FROM test.show_constraints('disttable')
WHERE "Constraint"='device_chk';
 Constraint | Type | Columns  | Index |     Expr     | Deferrable | Deferred | Validated 
------------+------+----------+-------+--------------+------------+----------+-----------
 device_chk | c    | {device} | -     | (device > 0) | f          | f        | t
(1 row)

SELECT * FROM test.remote_exec(ARRAY[:'DATA_NODE_1'], $$
       SELECT chunk.relid AS chunk_relid,
	   		  (SELECT "Constraint" AS constr FROM test.show_constraints(chunk.relid) WHERE "Constraint"='device_chk')
	   FROM (SELECT "Child" AS relid FROM test.show_subtables('disttable') LIMIT 1) chunk
$$);
NOTICE:  [db_dist_ddl_1]: 
       SELECT chunk.relid AS chunk_relid,
	   		  (SELECT "Constraint" AS constr FROM test.show_constraints(chunk.relid) WHERE "Constraint"='device_chk')
	   FROM (SELECT "Child" AS relid FROM test.show_subtables('disttable') LIMIT 1) chunk

NOTICE:  [db_dist_ddl_1]:
chunk_relid                                |constr    
-------------------------------------------+----------
_timescaledb_internal._dist_hyper_1_1_chunk|device_chk
(1 row)


 remote_exec 
-------------
 
(1 row)

-- Rename index
ALTER INDEX disttable_description_idx RENAME to disttable_descr_idx;
SELECT * FROM test.show_indexes('disttable')
WHERE "Index"='disttable_descr_idx'::regclass;
        Index        |    Columns    | Expr | Unique | Primary | Exclusion | Tablespace 
---------------------+---------------+------+--------+---------+-----------+------------
 disttable_descr_idx | {description} |      | f      | f       | f         | 
(1 row)

SELECT * FROM test.remote_exec(ARRAY[:'DATA_NODE_1'], $$
	   SELECT chunk.relid AS chunk_relid, (test.show_indexes(chunk.relid)).*
	   FROM (SELECT "Child" AS relid FROM test.show_subtables('disttable') LIMIT 1) chunk
$$);
NOTICE:  [db_dist_ddl_1]: 
	   SELECT chunk.relid AS chunk_relid, (test.show_indexes(chunk.relid)).*
	   FROM (SELECT "Child" AS relid FROM test.show_subtables('disttable') LIMIT 1) chunk

NOTICE:  [db_dist_ddl_1]:
chunk_relid                                |Index                                                              |Columns      |Expr|Unique|Primary|Exclusion|Tablespace
-------------------------------------------+-------------------------------------------------------------------+-------------+----+------+-------+---------+----------
_timescaledb_internal._dist_hyper_1_1_chunk|_timescaledb_internal._dist_hyper_1_1_chunk_disttable_descr_idx    |{description}|    |f     |f      |f        |          
_timescaledb_internal._dist_hyper_1_1_chunk|_timescaledb_internal._dist_hyper_1_1_chunk_disttable_pk           |{time,temp}  |    |t     |f      |f        |          
_timescaledb_internal._dist_hyper_1_1_chunk|_timescaledb_internal._dist_hyper_1_1_chunk_disttable_temp_time_idx|{temp,time}  |    |f     |f      |f        |          
_timescaledb_internal._dist_hyper_1_1_chunk|_timescaledb_internal._dist_hyper_1_1_chunk_disttable_time_idx     |{time}       |    |f     |f      |f        |          
(4 rows)


 remote_exec 
-------------
 
(1 row)

-- Test REINDEX command with distributed hypertable
\c :DATA_NODE_1
SELECT * FROM test.show_indexes('_timescaledb_internal._dist_hyper_1_1_chunk');
                                Index                                |    Columns    | Expr | Unique | Primary | Exclusion | Tablespace 
---------------------------------------------------------------------+---------------+------+--------+---------+-----------+------------
 _timescaledb_internal._dist_hyper_1_1_chunk_disttable_descr_idx     | {description} |      | f      | f       | f         | 
 _timescaledb_internal._dist_hyper_1_1_chunk_disttable_pk            | {time,temp}   |      | t      | f       | f         | 
 _timescaledb_internal._dist_hyper_1_1_chunk_disttable_temp_time_idx | {temp,time}   |      | f      | f       | f         | 
 _timescaledb_internal._dist_hyper_1_1_chunk_disttable_time_idx      | {time}        |      | f      | f       | f         | 
(4 rows)

SELECT pg_relation_filepath('_timescaledb_internal._dist_hyper_1_1_chunk_disttable_pk'::regclass::oid) AS oid_before_reindex \gset
\c :TEST_DBNAME :ROLE_SUPERUSER;
SET ROLE :ROLE_1;
REINDEX TABLE disttable;
REINDEX (VERBOSE) TABLE disttable;
\c :DATA_NODE_1
SELECT pg_relation_filepath('_timescaledb_internal._dist_hyper_1_1_chunk_disttable_pk'::regclass::oid) AS oid_after_reindex \gset
\c :TEST_DBNAME :ROLE_SUPERUSER;
SET ROLE :ROLE_1;
-- expect chunk index oid to change after the reindex operation
SELECT :'oid_before_reindex' <> :'oid_after_reindex';
 ?column? 
----------
 t
(1 row)

-- CREATE/DROP TRIGGER
CREATE OR REPLACE FUNCTION test_trigger()
RETURNS TRIGGER LANGUAGE PLPGSQL AS
$BODY$
BEGIN
RETURN OLD;
END
$BODY$;
CREATE TRIGGER disttable_trigger_test
BEFORE INSERT ON disttable
FOR EACH ROW EXECUTE FUNCTION test_trigger();
DROP TRIGGER disttable_trigger_test on disttable;
DROP FUNCTION test_trigger;
CALL distributed_exec($$ DROP FUNCTION test_trigger $$);
-- DROP INDEX
\set ON_ERROR_STOP 0
DROP INDEX disttable_description_idx, disttable_pk;
ERROR:  cannot drop a hypertable index along with other objects
\set ON_ERROR_STOP 1
DROP INDEX disttable_descr_idx;
DROP INDEX disttable_pk;
SELECT * FROM test.show_indexes('disttable');
          Index          |   Columns   | Expr | Unique | Primary | Exclusion | Tablespace 
-------------------------+-------------+------+--------+---------+-----------+------------
 disttable_temp_time_idx | {temp,time} |      | f      | f       | f         | 
 disttable_time_idx      | {time}      |      | f      | f       | f         | 
(2 rows)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_indexes('disttable') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_indexes('disttable') 
NOTICE:  [db_dist_ddl_1]:
Index                  |Columns    |Expr|Unique|Primary|Exclusion|Tablespace
-----------------------+-----------+----+------+-------+---------+----------
disttable_temp_time_idx|{temp,time}|    |f     |f      |f        |          
disttable_time_idx     |{time}     |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_indexes('disttable') 
NOTICE:  [db_dist_ddl_2]:
Index                  |Columns    |Expr|Unique|Primary|Exclusion|Tablespace
-----------------------+-----------+----+------+-------+---------+----------
disttable_temp_time_idx|{temp,time}|    |f     |f      |f        |          
disttable_time_idx     |{time}     |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_indexes('disttable') 
NOTICE:  [db_dist_ddl_3]:
Index                  |Columns    |Expr|Unique|Primary|Exclusion|Tablespace
-----------------------+-----------+----+------+-------+---------+----------
disttable_temp_time_idx|{temp,time}|    |f     |f      |f        |          
disttable_time_idx     |{time}     |    |f     |f      |f        |          
(2 rows)


 remote_exec 
-------------
 
(1 row)

-- DROP TABLE
DROP TABLE disttable;
SELECT * FROM test.remote_exec(NULL, $$ SELECT 1 FROM pg_tables WHERE tablename = 'disttable' $$);
NOTICE:  [db_dist_ddl_1]:  SELECT 1 FROM pg_tables WHERE tablename = 'disttable' 
NOTICE:  [db_dist_ddl_1]:
?column?
--------
(0 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT 1 FROM pg_tables WHERE tablename = 'disttable' 
NOTICE:  [db_dist_ddl_2]:
?column?
--------
(0 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT 1 FROM pg_tables WHERE tablename = 'disttable' 
NOTICE:  [db_dist_ddl_3]:
?column?
--------
(0 rows)


 remote_exec 
-------------
 
(1 row)

DROP TABLE non_disttable1;
DROP TABLE non_disttable2;
-- CREATE SCHEMA tests
\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
CREATE SCHEMA dist_schema AUTHORIZATION :ROLE_1;
-- make sure schema has been created on each data node
SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema'
NOTICE:  [db_dist_ddl_1]:
nspname    |usename    
-----------+-----------
dist_schema|test_role_1
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema'
NOTICE:  [db_dist_ddl_2]:
nspname    |usename    
-----------+-----------
dist_schema|test_role_1
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema'
NOTICE:  [db_dist_ddl_3]:
nspname    |usename    
-----------+-----------
dist_schema|test_role_1
(1 row)


 remote_exec 
-------------
 
(1 row)

CREATE TABLE dist_schema.some_dist_table(time timestamptz, device int, color int, temp float);
SELECT * FROM create_hypertable('dist_schema.some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
             3 | dist_schema | some_dist_table | t
(1 row)

SELECT * FROM test.remote_exec(NULL, $$ SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' $$);
NOTICE:  [db_dist_ddl_1]:  SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' 
NOTICE:  [db_dist_ddl_1]:
schemaname |tablename      
-----------+---------------
dist_schema|some_dist_table
(1 row)


NOTICE:  [db_dist_ddl_2]:  SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' 
NOTICE:  [db_dist_ddl_2]:
schemaname |tablename      
-----------+---------------
dist_schema|some_dist_table
(1 row)


NOTICE:  [db_dist_ddl_3]:  SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' 
NOTICE:  [db_dist_ddl_3]:
schemaname |tablename      
-----------+---------------
dist_schema|some_dist_table
(1 row)


 remote_exec 
-------------
 
(1 row)

-- DROP SCHEMA
DROP SCHEMA dist_schema CASCADE;
NOTICE:  drop cascades to table dist_schema.some_dist_table
SELECT * FROM test.remote_exec(NULL, $$ SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' $$);
NOTICE:  [db_dist_ddl_1]:  SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' 
NOTICE:  [db_dist_ddl_1]:
schemaname|tablename
----------+---------
(0 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' 
NOTICE:  [db_dist_ddl_2]:
schemaname|tablename
----------+---------
(0 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' 
NOTICE:  [db_dist_ddl_3]:
schemaname|tablename
----------+---------
(0 rows)


 remote_exec 
-------------
 
(1 row)

-- make sure schema has been dropped on each data node
SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema'
NOTICE:  [db_dist_ddl_1]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema'
NOTICE:  [db_dist_ddl_2]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema'
NOTICE:  [db_dist_ddl_3]:
nspname|usename
-------+-------
(0 rows)


 remote_exec 
-------------
 
(1 row)

-- make sure empty schema schema has been created and then dropped on each data node
CREATE SCHEMA dist_schema_2;
SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2'
NOTICE:  [db_dist_ddl_1]:
nspname      |usename           
-------------+------------------
dist_schema_2|cluster_super_user
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2'
NOTICE:  [db_dist_ddl_2]:
nspname      |usename           
-------------+------------------
dist_schema_2|cluster_super_user
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2'
NOTICE:  [db_dist_ddl_3]:
nspname      |usename           
-------------+------------------
dist_schema_2|cluster_super_user
(1 row)


 remote_exec 
-------------
 
(1 row)

DROP SCHEMA dist_schema_2;
SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2'
NOTICE:  [db_dist_ddl_1]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2'
NOTICE:  [db_dist_ddl_2]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2'
NOTICE:  [db_dist_ddl_3]:
nspname|usename
-------+-------
(0 rows)


 remote_exec 
-------------
 
(1 row)

-- transactional schema create/drop with local table
BEGIN;
CREATE SCHEMA dist_schema_3;
CREATE TABLE dist_schema_3.some_dist_table(time timestamptz, device int);
SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_3';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_3'
NOTICE:  [db_dist_ddl_1]:
nspname      |usename           
-------------+------------------
dist_schema_3|cluster_super_user
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_3'
NOTICE:  [db_dist_ddl_2]:
nspname      |usename           
-------------+------------------
dist_schema_3|cluster_super_user
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_3'
NOTICE:  [db_dist_ddl_3]:
nspname      |usename           
-------------+------------------
dist_schema_3|cluster_super_user
(1 row)


 remote_exec 
-------------
 
(1 row)

DROP SCHEMA dist_schema_3 CASCADE;
NOTICE:  drop cascades to table dist_schema_3.some_dist_table
ROLLBACK;
SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_3';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_3'
NOTICE:  [db_dist_ddl_1]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_3'
NOTICE:  [db_dist_ddl_2]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_3'
NOTICE:  [db_dist_ddl_3]:
nspname|usename
-------+-------
(0 rows)


 remote_exec 
-------------
 
(1 row)

-- ALTER SCHEMA RENAME TO
CREATE SCHEMA dist_schema;
CREATE TABLE dist_schema.some_dist_table(time timestamptz, device int, color int, temp float);
SELECT * FROM create_hypertable('dist_schema.some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
             4 | dist_schema | some_dist_table | t
(1 row)

ALTER SCHEMA dist_schema RENAME TO dist_schema_2;
SELECT * FROM test.remote_exec(NULL, $$ SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' $$);
NOTICE:  [db_dist_ddl_1]:  SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' 
NOTICE:  [db_dist_ddl_1]:
schemaname   |tablename      
-------------+---------------
dist_schema_2|some_dist_table
(1 row)


NOTICE:  [db_dist_ddl_2]:  SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' 
NOTICE:  [db_dist_ddl_2]:
schemaname   |tablename      
-------------+---------------
dist_schema_2|some_dist_table
(1 row)


NOTICE:  [db_dist_ddl_3]:  SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'some_dist_table' 
NOTICE:  [db_dist_ddl_3]:
schemaname   |tablename      
-------------+---------------
dist_schema_2|some_dist_table
(1 row)


 remote_exec 
-------------
 
(1 row)

-- ALTER SCHEMA OWNER TO
ALTER SCHEMA dist_schema_2 OWNER TO :ROLE_1;
SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2'
NOTICE:  [db_dist_ddl_1]:
nspname      |usename    
-------------+-----------
dist_schema_2|test_role_1
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2'
NOTICE:  [db_dist_ddl_2]:
nspname      |usename    
-------------+-----------
dist_schema_2|test_role_1
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'dist_schema_2'
NOTICE:  [db_dist_ddl_3]:
nspname      |usename    
-------------+-----------
dist_schema_2|test_role_1
(1 row)


 remote_exec 
-------------
 
(1 row)

DROP SCHEMA dist_schema_2 CASCADE;
NOTICE:  drop cascades to table dist_schema_2.some_dist_table
-- DROP column cascades to index drop
CREATE TABLE some_dist_table(time timestamptz, device int, color int, temp float);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
             5 | public      | some_dist_table | t
(1 row)

CREATE INDEX some_dist_device_idx ON some_dist_table (device);
SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_indexes('some_dist_table') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


 remote_exec 
-------------
 
(1 row)

ALTER TABLE some_dist_table DROP COLUMN device;
SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_indexes('some_dist_table') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- Creation of foreign key on distributed hypertable table will lead
-- to error, since non_htable is local
CREATE TABLE non_htable (id int PRIMARY KEY);
CREATE TABLE some_dist_table(time timestamptz, device int REFERENCES non_htable(id));
\set ON_ERROR_STOP 0
SELECT test.execute_sql_and_filter_data_node_name_on_error($$
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
$$);
WARNING:  distributed hypertable "some_dist_table" has a foreign key to a non-distributed table
NOTICE:  adding not-null constraint to column "time"
ERROR:  [db_dist_ddl_x]: relation "non_htable" does not exist
\set ON_ERROR_STOP 1
DROP TABLE some_dist_table;
DROP TABLE non_htable;
-- Test disabling DDL commands on global objects
--
SET timescaledb_experimental.enable_distributed_ddl TO 'off';
SET client_min_messages TO DEBUG1;
-- CREATE SCHEMA
CREATE SCHEMA schema_global;
LOG:  statement: CREATE SCHEMA schema_global;
DEBUG:  skipping dist DDL on object: CREATE SCHEMA schema_global;
-- Ensure SCHEMA is not created on data nodes
SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'schema_global';
$$);
LOG:  statement: SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'schema_global';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'schema_global'
NOTICE:  [db_dist_ddl_1]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'schema_global'
NOTICE:  [db_dist_ddl_2]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'schema_global'
NOTICE:  [db_dist_ddl_3]:
nspname|usename
-------+-------
(0 rows)


 remote_exec 
-------------
 
(1 row)

-- RENAME SCHEMA
ALTER SCHEMA schema_global RENAME TO schema_global_2;
LOG:  statement: ALTER SCHEMA schema_global RENAME TO schema_global_2;
DEBUG:  skipping dist DDL on object: ALTER SCHEMA schema_global RENAME TO schema_global_2;
-- ALTER SCHEMA OWNER TO
ALTER SCHEMA schema_global_2 OWNER TO :ROLE_1;
LOG:  statement: ALTER SCHEMA schema_global_2 OWNER TO test_role_1;
DEBUG:  skipping dist DDL on object: ALTER SCHEMA schema_global_2 OWNER TO test_role_1;
-- REASSIGN OWNED BY TO
REASSIGN OWNED BY :ROLE_1 TO :ROLE_1;
LOG:  statement: REASSIGN OWNED BY test_role_1 TO test_role_1;
DEBUG:  skipping dist DDL on object: REASSIGN OWNED BY test_role_1 TO test_role_1;
-- Reset earlier to avoid different debug output between PG versions
RESET client_min_messages;
LOG:  statement: RESET client_min_messages;
-- DROP OWNED BY schema_global_2
DROP OWNED BY :ROLE_1;
-- DROP SCHEMA
CREATE SCHEMA schema_global;
SELECT * FROM test.remote_exec(NULL, $$
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'schema_global';
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'schema_global'
NOTICE:  [db_dist_ddl_1]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'schema_global'
NOTICE:  [db_dist_ddl_2]:
nspname|usename
-------+-------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT s.nspname, u.usename
FROM pg_catalog.pg_namespace s
JOIN pg_catalog.pg_user u ON u.usesysid = s.nspowner
WHERE s.nspname = 'schema_global'
NOTICE:  [db_dist_ddl_3]:
nspname|usename
-------+-------
(0 rows)


 remote_exec 
-------------
 
(1 row)

DROP SCHEMA schema_global;
SET timescaledb_experimental.enable_distributed_ddl TO 'on';
-- Transactional DDL tests
-- Single-statement transactions
-- BEGIN/COMMIT
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
             7 | public      | some_dist_table | t
(1 row)

BEGIN;
CREATE INDEX some_dist_device_idx ON some_dist_table (device);
COMMIT;
SELECT * FROM test.show_indexes('some_dist_table');
          Index           | Columns  | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------------+----------+------+--------+---------+-----------+------------
 some_dist_device_idx     | {device} |      | f      | f       | f         | 
 some_dist_table_time_idx | {time}   |      | f      | f       | f         | 
(2 rows)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_indexes('some_dist_table') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- BEGIN/ROLLBACK
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
             8 | public      | some_dist_table | t
(1 row)

BEGIN;
CREATE INDEX some_dist_device_idx ON some_dist_table (device);
ROLLBACK;
SELECT * FROM test.show_indexes('some_dist_table');
          Index           | Columns | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------------+---------+------+--------+---------+-----------+------------
 some_dist_table_time_idx | {time}  |      | f      | f       | f         | 
(1 row)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * FROM test.show_indexes('some_dist_table') $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_2]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_3]:  SELECT * FROM test.show_indexes('some_dist_table') 
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- DDL with multiple sub-commands (ALTER)
BEGIN;
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_distributed_hypertable('some_dist_table', 'time');
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
             9 | public      | some_dist_table | t
(1 row)

\set ON_ERROR_STOP 0
-- Mixing SET and other options not supported. This is to protect
-- against mixing custom (compression) options with other
-- sub-commands.
ALTER TABLE some_dist_table SET (fillfactor = 10),
ADD CONSTRAINT device_check CHECK (device > 0);
ERROR:  ALTER TABLE <hypertable> SET does not support multiple clauses
\set ON_ERROR_STOP 1
ROLLBACK;
-- Multi-statement transactions
-- BEGIN/COMMIT
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
            10 | public      | some_dist_table | t
(1 row)

BEGIN;
CREATE INDEX some_dist_device_idx ON some_dist_table (device);
ALTER TABLE some_dist_table ADD CONSTRAINT device_check CHECK (device > 0);
COMMIT;
SELECT * FROM test.show_indexes('some_dist_table');
          Index           | Columns  | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------------+----------+------+--------+---------+-----------+------------
 some_dist_device_idx     | {device} |      | f      | f       | f         | 
 some_dist_table_time_idx | {time}   |      | f      | f       | f         | 
(2 rows)

SELECT * FROM test.show_constraints('some_dist_table');
  Constraint  | Type | Columns  | Index |     Expr     | Deferrable | Deferred | Validated 
--------------+------+----------+-------+--------------+------------+----------+-----------
 device_check | c    | {device} | -     | (device > 0) | f          | f        | t
(1 row)

SELECT * FROM test.remote_exec(NULL, $$
SELECT * FROM test.show_indexes('some_dist_table');
SELECT * FROM test.show_constraints('some_dist_table');
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Constraint  |Type|Columns |Index|Expr        |Deferrable|Deferred|Validated
------------+----+--------+-----+------------+----------+--------+---------
device_check|c   |{device}|-    |(device > 0)|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Constraint  |Type|Columns |Index|Expr        |Deferrable|Deferred|Validated
------------+----+--------+-----+------------+----------+--------+---------
device_check|c   |{device}|-    |(device > 0)|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Constraint  |Type|Columns |Index|Expr        |Deferrable|Deferred|Validated
------------+----+--------+-----+------------+----------+--------+---------
device_check|c   |{device}|-    |(device > 0)|f         |f       |t        
(1 row)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- BEGIN/ROLLBACK
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
            11 | public      | some_dist_table | t
(1 row)

BEGIN;
CREATE INDEX some_dist_device_idx ON some_dist_table (device);
ALTER TABLE some_dist_table ADD CONSTRAINT device_check CHECK (device > 0);
ROLLBACK;
SELECT * FROM test.show_indexes('some_dist_table');
          Index           | Columns | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------------+---------+------+--------+---------+-----------+------------
 some_dist_table_time_idx | {time}  |      | f      | f       | f         | 
(1 row)

SELECT * FROM test.show_constraints('some_dist_table');
 Constraint | Type | Columns | Index | Expr | Deferrable | Deferred | Validated 
------------+------+---------+-------+------+------------+----------+-----------
(0 rows)

SELECT * FROM test.remote_exec(NULL, $$
SELECT * FROM test.show_indexes('some_dist_table');
SELECT * FROM test.show_constraints('some_dist_table');
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- Nested transactions
-- BEGIN/BEGIN/COMMIT/COMMIT
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
            12 | public      | some_dist_table | t
(1 row)

BEGIN;
SAVEPOINT a;
CREATE INDEX some_dist_device_idx ON some_dist_table (device);
SAVEPOINT b;
ALTER TABLE some_dist_table ADD CONSTRAINT device_check CHECK (device > 0);
COMMIT;
SELECT * FROM test.show_indexes('some_dist_table');
          Index           | Columns  | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------------+----------+------+--------+---------+-----------+------------
 some_dist_device_idx     | {device} |      | f      | f       | f         | 
 some_dist_table_time_idx | {time}   |      | f      | f       | f         | 
(2 rows)

SELECT * FROM test.show_constraints('some_dist_table');
  Constraint  | Type | Columns  | Index |     Expr     | Deferrable | Deferred | Validated 
--------------+------+----------+-------+--------------+------------+----------+-----------
 device_check | c    | {device} | -     | (device > 0) | f          | f        | t
(1 row)

SELECT * FROM test.remote_exec(NULL, $$
SELECT * FROM test.show_indexes('some_dist_table');
SELECT * FROM test.show_constraints('some_dist_table');
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Constraint  |Type|Columns |Index|Expr        |Deferrable|Deferred|Validated
------------+----+--------+-----+------------+----------+--------+---------
device_check|c   |{device}|-    |(device > 0)|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Constraint  |Type|Columns |Index|Expr        |Deferrable|Deferred|Validated
------------+----+--------+-----+------------+----------+--------+---------
device_check|c   |{device}|-    |(device > 0)|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Constraint  |Type|Columns |Index|Expr        |Deferrable|Deferred|Validated
------------+----+--------+-----+------------+----------+--------+---------
device_check|c   |{device}|-    |(device > 0)|f         |f       |t        
(1 row)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- BEGIN/BEGIN/ROLLBACK/COMMIT
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
            13 | public      | some_dist_table | t
(1 row)

BEGIN;
SAVEPOINT a;
CREATE INDEX some_dist_device_idx ON some_dist_table (device);
SAVEPOINT b;
ALTER TABLE some_dist_table ADD CONSTRAINT device_check CHECK (device > 0);
ROLLBACK TO SAVEPOINT b;
COMMIT;
SELECT * FROM test.show_indexes('some_dist_table');
          Index           | Columns  | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------------+----------+------+--------+---------+-----------+------------
 some_dist_device_idx     | {device} |      | f      | f       | f         | 
 some_dist_table_time_idx | {time}   |      | f      | f       | f         | 
(2 rows)

SELECT * FROM test.show_constraints('some_dist_table');
 Constraint | Type | Columns | Index | Expr | Deferrable | Deferred | Validated 
------------+------+---------+-------+------+------------+----------+-----------
(0 rows)

SELECT * FROM test.remote_exec(NULL, $$
SELECT * FROM test.show_indexes('some_dist_table');
SELECT * FROM test.show_constraints('some_dist_table');
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns |Expr|Unique|Primary|Exclusion|Tablespace
------------------------+--------+----+------+-------+---------+----------
some_dist_device_idx    |{device}|    |f     |f      |f        |          
some_dist_table_time_idx|{time}  |    |f     |f      |f        |          
(2 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- BEGIN/BEGIN/COMMIT/ROLLBACK
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
            14 | public      | some_dist_table | t
(1 row)

BEGIN;
SAVEPOINT a;
CREATE INDEX some_dist_device_idx ON some_dist_table (device);
SAVEPOINT b;
ALTER TABLE some_dist_table ADD CONSTRAINT device_check CHECK (device > 0);
ROLLBACK TO SAVEPOINT a;
ROLLBACK;
SELECT * FROM test.show_indexes('some_dist_table');
          Index           | Columns | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------------+---------+------+--------+---------+-----------+------------
 some_dist_table_time_idx | {time}  |      | f      | f       | f         | 
(1 row)

SELECT * FROM test.show_constraints('some_dist_table');
 Constraint | Type | Columns | Index | Expr | Deferrable | Deferred | Validated 
------------+------+---------+-------+------+------------+----------+-----------
(0 rows)

SELECT * FROM test.remote_exec(NULL, $$
SELECT * FROM test.show_indexes('some_dist_table');
SELECT * FROM test.show_constraints('some_dist_table');
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- BEGIN/BEGIN/ROLLBACK/ROLLBACK
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
            15 | public      | some_dist_table | t
(1 row)

BEGIN;
SAVEPOINT a;
CREATE INDEX some_dist_device_idx ON some_dist_table (device);
SAVEPOINT b;
ALTER TABLE some_dist_table ADD CONSTRAINT device_check CHECK (device > 0);
ROLLBACK TO SAVEPOINT b;
ROLLBACK TO SAVEPOINT a;
ROLLBACK;
SELECT * FROM test.show_indexes('some_dist_table');
          Index           | Columns | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------------+---------+------+--------+---------+-----------+------------
 some_dist_table_time_idx | {time}  |      | f      | f       | f         | 
(1 row)

SELECT * FROM test.show_constraints('some_dist_table');
 Constraint | Type | Columns | Index | Expr | Deferrable | Deferred | Validated 
------------+------+---------+-------+------+------------+----------+-----------
(0 rows)

SELECT * FROM test.remote_exec(NULL, $$
SELECT * FROM test.show_indexes('some_dist_table');
SELECT * FROM test.show_constraints('some_dist_table');
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- BEGIN/BEGIN/ABORT/ROLLBACK
CREATE TABLE some_dist_table(time timestamptz, device int);
SELECT * FROM create_hypertable('some_dist_table', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name |   table_name    | created 
---------------+-------------+-----------------+---------
            16 | public      | some_dist_table | t
(1 row)

BEGIN;
SAVEPOINT a;
CREATE INDEX some_dist_device_idx ON some_dist_table (device);
SAVEPOINT b;
ALTER TABLE some_dist_table ADD CONSTRAINT device_check CHECK (device > 0);
\set ON_ERROR_STOP 0
ALTER TABLE some_dist_table ADD CONSTRAINT device_check CHECK (device > 0);
ERROR:  constraint "device_check" for relation "some_dist_table" already exists
\set ON_ERROR_STOP 1
ROLLBACK TO SAVEPOINT b;
ROLLBACK TO SAVEPOINT a;
ROLLBACK;
SELECT * FROM test.show_indexes('some_dist_table');
          Index           | Columns | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------------+---------+------+--------+---------+-----------+------------
 some_dist_table_time_idx | {time}  |      | f      | f       | f         | 
(1 row)

SELECT * FROM test.show_constraints('some_dist_table');
 Constraint | Type | Columns | Index | Expr | Deferrable | Deferred | Validated 
------------+------+---------+-------+------+------------+----------+-----------
(0 rows)

SELECT * FROM test.remote_exec(NULL, $$
SELECT * FROM test.show_indexes('some_dist_table');
SELECT * FROM test.show_constraints('some_dist_table');
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_1]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_2]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_indexes('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Index                   |Columns|Expr|Unique|Primary|Exclusion|Tablespace
------------------------+-------+----+------+-------+---------+----------
some_dist_table_time_idx|{time} |    |f     |f      |f        |          
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_constraints('some_dist_table')
NOTICE:  [db_dist_ddl_3]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


 remote_exec 
-------------
 
(1 row)

DROP TABLE some_dist_table;
-- Test chunks updates
CREATE TABLE disttable(time timestamptz, device int, color int CONSTRAINT color_check CHECK (color > 0), temp float);
CREATE UNIQUE INDEX disttable_pk ON disttable(time);
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
            17 | public      | disttable  | t
(1 row)

INSERT INTO disttable VALUES ('2017-01-01 06:01', 0, 1, 0.0);
SELECT show_chunks('disttable');
                 show_chunks                  
----------------------------------------------
 _timescaledb_internal._dist_hyper_17_6_chunk
(1 row)

SELECT * FROM test.show_constraints('disttable');
 Constraint  | Type | Columns | Index |    Expr     | Deferrable | Deferred | Validated 
-------------+------+---------+-------+-------------+------------+----------+-----------
 color_check | c    | {color} | -     | (color > 0) | f          | f        | t
(1 row)

SELECT (test.show_constraints(chunk)).*
FROM show_chunks('disttable') AS chunk;
  Constraint  | Type | Columns | Index |                                                                      Expr                                                                      | Deferrable | Deferred | Validated 
--------------+------+---------+-------+------------------------------------------------------------------------------------------------------------------------------------------------+------------+----------+-----------
 color_check  | c    | {color} | -     | (color > 0)                                                                                                                                    | f          | f        | t
 constraint_6 | c    | {time}  | -     | (("time" >= 'Wed Dec 28 16:00:00 2016 PST'::timestamp with time zone) AND ("time" < 'Wed Jan 04 16:00:00 2017 PST'::timestamp with time zone)) | f          | f        | t
(2 rows)

ALTER TABLE disttable DROP CONSTRAINT color_check;
SELECT * FROM test.show_constraints('disttable');
 Constraint | Type | Columns | Index | Expr | Deferrable | Deferred | Validated 
------------+------+---------+-------+------+------------+----------+-----------
(0 rows)

SELECT (test.show_constraints(chunk)).*
FROM show_chunks('disttable') AS chunk;
  Constraint  | Type | Columns | Index |                                                                      Expr                                                                      | Deferrable | Deferred | Validated 
--------------+------+---------+-------+------------------------------------------------------------------------------------------------------------------------------------------------+------------+----------+-----------
 constraint_6 | c    | {time}  | -     | (("time" >= 'Wed Dec 28 16:00:00 2016 PST'::timestamp with time zone) AND ("time" < 'Wed Jan 04 16:00:00 2017 PST'::timestamp with time zone)) | f          | f        | t
(1 row)

SELECT * FROM test.remote_exec(NULL, $$
SELECT show_chunks('disttable');
SELECT * FROM test.show_constraints('disttable');
SELECT (test.show_constraints(chunk)).*
FROM show_chunks('disttable') AS chunk;
$$);
NOTICE:  [db_dist_ddl_1]: 
SELECT show_chunks('disttable')
NOTICE:  [db_dist_ddl_1]:
show_chunks                                 
--------------------------------------------
_timescaledb_internal._dist_hyper_17_6_chunk
(1 row)


NOTICE:  [db_dist_ddl_1]: 
SELECT * FROM test.show_constraints('disttable')
NOTICE:  [db_dist_ddl_1]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_1]: 
SELECT (test.show_constraints(chunk)).*
FROM show_chunks('disttable') AS chunk
NOTICE:  [db_dist_ddl_1]:
Constraint  |Type|Columns|Index|Expr                                                                                                                                          |Deferrable|Deferred|Validated
------------+----+-------+-----+----------------------------------------------------------------------------------------------------------------------------------------------+----------+--------+---------
constraint_6|c   |{time} |-    |(("time" >= 'Wed Dec 28 16:00:00 2016 PST'::timestamp with time zone) AND ("time" < 'Wed Jan 04 16:00:00 2017 PST'::timestamp with time zone))|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT show_chunks('disttable')
NOTICE:  [db_dist_ddl_2]:
show_chunks                                 
--------------------------------------------
_timescaledb_internal._dist_hyper_17_6_chunk
(1 row)


NOTICE:  [db_dist_ddl_2]: 
SELECT * FROM test.show_constraints('disttable')
NOTICE:  [db_dist_ddl_2]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_2]: 
SELECT (test.show_constraints(chunk)).*
FROM show_chunks('disttable') AS chunk
NOTICE:  [db_dist_ddl_2]:
Constraint  |Type|Columns|Index|Expr                                                                                                                                          |Deferrable|Deferred|Validated
------------+----+-------+-----+----------------------------------------------------------------------------------------------------------------------------------------------+----------+--------+---------
constraint_6|c   |{time} |-    |(("time" >= 'Wed Dec 28 16:00:00 2016 PST'::timestamp with time zone) AND ("time" < 'Wed Jan 04 16:00:00 2017 PST'::timestamp with time zone))|f         |f       |t        
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT show_chunks('disttable')
NOTICE:  [db_dist_ddl_3]:
show_chunks                                 
--------------------------------------------
_timescaledb_internal._dist_hyper_17_6_chunk
(1 row)


NOTICE:  [db_dist_ddl_3]: 
SELECT * FROM test.show_constraints('disttable')
NOTICE:  [db_dist_ddl_3]:
Constraint|Type|Columns|Index|Expr|Deferrable|Deferred|Validated
----------+----+-------+-----+----+----------+--------+---------
(0 rows)


NOTICE:  [db_dist_ddl_3]: 
SELECT (test.show_constraints(chunk)).*
FROM show_chunks('disttable') AS chunk
NOTICE:  [db_dist_ddl_3]:
Constraint  |Type|Columns|Index|Expr                                                                                                                                          |Deferrable|Deferred|Validated
------------+----+-------+-----+----------------------------------------------------------------------------------------------------------------------------------------------+----------+--------+---------
constraint_6|c   |{time} |-    |(("time" >= 'Wed Dec 28 16:00:00 2016 PST'::timestamp with time zone) AND ("time" < 'Wed Jan 04 16:00:00 2017 PST'::timestamp with time zone))|f         |f       |t        
(1 row)


 remote_exec 
-------------
 
(1 row)

DROP TABLE disttable;
-- Test event triggers behaviour
CREATE OR REPLACE FUNCTION test_event_trigger_sql_drop_function() RETURNS event_trigger
LANGUAGE plpgsql AS $$
BEGIN
    EXECUTE 'DROP TABLE IF EXISTS unexist_table';
END
$$;
\c :TEST_DBNAME :ROLE_SUPERUSER;
CREATE EVENT TRIGGER test_event_trigger_sqldrop ON sql_drop
    WHEN TAG IN ('drop table')
    EXECUTE FUNCTION test_event_trigger_sql_drop_function();
GRANT CREATE ON SCHEMA public TO :ROLE_1;
SET ROLE :ROLE_1;
-- Test DROP inside event trigger on local table (should not crash)
CREATE TABLE non_htable (id int PRIMARY KEY);
DROP TABLE non_htable;
NOTICE:  table "unexist_table" does not exist, skipping
\c :TEST_DBNAME :ROLE_SUPERUSER;
DROP EVENT TRIGGER test_event_trigger_sqldrop;
SET ROLE :ROLE_1;
-- Test DDL blocking from non-frontend session
--
-- We test only special corner cases since most of this functionality already
-- been tested before.
--
CREATE TABLE disttable(time timestamptz, device int);
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => 3);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
            18 | public      | disttable  | t
(1 row)

CREATE INDEX disttable_device_idx ON disttable (device);
-- Test alter replication factor on empty table
SELECT replication_factor FROM _timescaledb_catalog.hypertable ORDER BY id;
 replication_factor 
--------------------
                  3
(1 row)

SELECT * FROM set_replication_factor('disttable',  1);
 set_replication_factor 
------------------------
 
(1 row)

SELECT replication_factor FROM _timescaledb_catalog.hypertable ORDER BY id;
 replication_factor 
--------------------
                  1
(1 row)

SELECT * FROM set_replication_factor('disttable',  1);
 set_replication_factor 
------------------------
 
(1 row)

SELECT replication_factor FROM _timescaledb_catalog.hypertable ORDER BY id;
 replication_factor 
--------------------
                  1
(1 row)

SELECT * FROM set_replication_factor('disttable',  2);
 set_replication_factor 
------------------------
 
(1 row)

SELECT replication_factor FROM _timescaledb_catalog.hypertable ORDER BY id;
 replication_factor 
--------------------
                  2
(1 row)

\set ON_ERROR_STOP 0
SELECT * FROM set_replication_factor('disttable',  4);
ERROR:  replication factor too large for hypertable "disttable"
SELECT * FROM set_replication_factor('disttable',  0);
ERROR:  invalid replication factor
SELECT * FROM set_replication_factor('disttable',  NULL);
ERROR:  invalid replication factor
\set ON_ERROR_STOP 1
SELECT replication_factor FROM _timescaledb_catalog.hypertable ORDER BY id;
 replication_factor 
--------------------
                  2
(1 row)

\c :DATA_NODE_1
SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'disttable';
 schemaname | tablename 
------------+-----------
 public     | disttable
(1 row)

SELECT * FROM test.show_indexes('disttable');
        Index         | Columns  | Expr | Unique | Primary | Exclusion | Tablespace 
----------------------+----------+------+--------+---------+-----------+------------
 disttable_device_idx | {device} |      | f      | f       | f         | 
 disttable_time_idx   | {time}   |      | f      | f       | f         | 
(2 rows)

\set ON_ERROR_STOP 0
-- fail to alter replication factor for the table on data node
SELECT * FROM set_replication_factor('disttable',  1);
ERROR:  hypertable "disttable" is not distributed
-- Test TRUNCATE blocked on data node
TRUNCATE disttable;
ERROR:  operation is blocked on a distributed hypertable member
-- Test ALTER by non-frontend session
ALTER TABLE disttable ADD CONSTRAINT device_check CHECK (device > 0);
ERROR:  operation is blocked on a distributed hypertable member
-- Test path for delayed relid resolving
ALTER TABLE disttable RENAME TO disttable2;
ERROR:  operation is blocked on a distributed hypertable member
-- Test for hypertables collected during drop
DROP INDEX disttable_device_idx;
ERROR:  operation is blocked on a distributed hypertable member
DROP TABLE disttable;
ERROR:  operation is blocked on a distributed hypertable member
\set ON_ERROR_STOP 1
-- Explicitly allow execution
SET timescaledb.enable_client_ddl_on_data_nodes TO true;
DROP INDEX disttable_device_idx;
SELECT * FROM test.show_indexes('disttable');
       Index        | Columns | Expr | Unique | Primary | Exclusion | Tablespace 
--------------------+---------+------+--------+---------+-----------+------------
 disttable_time_idx | {time}  |      | f      | f       | f         | 
(1 row)

\c :TEST_DBNAME :ROLE_SUPERUSER;
SET ROLE :ROLE_1;
-- Should fail because of the inconsistency
\set ON_ERROR_STOP 0
DROP INDEX disttable_device_idx;
ERROR:  [db_dist_ddl_1]: index "disttable_device_idx" does not exist
\set ON_ERROR_STOP 1
DROP TABLE disttable;
-- Ensure VACUUM/ANALYZE commands can be run on a data node
-- without enabling timescaledb.enable_client_ddl_on_data_nodes guc
CREATE TABLE disttable(time timestamptz NOT NULL, device int);
SELECT * FROM create_distributed_hypertable('disttable', 'time', 'device', replication_factor => 3);
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
            19 | public      | disttable  | t
(1 row)

\c :DATA_NODE_1
ANALYZE disttable;
ANALYZE;
VACUUM disttable;
VACUUM;
\c :TEST_DBNAME :ROLE_SUPERUSER;
DROP TABLE disttable;
-- Ensure ANALYZE commands can be run on a set of data nodes
--
-- Issue: #4508
--
CREATE TABLE hyper(time TIMESTAMPTZ, device INT, temp FLOAT);
SELECT create_distributed_hypertable('hyper', 'time', 'device', 4, chunk_time_interval => interval '18 hours', replication_factor => 1, data_nodes => ARRAY[:'DATA_NODE_1',:'DATA_NODE_2']);
NOTICE:  adding not-null constraint to column "time"
 create_distributed_hypertable 
-------------------------------
 (20,public,hyper,t)
(1 row)

INSERT INTO hyper SELECT t, ceil((random() * 5))::int, random() * 80
FROM generate_series('2019-01-01'::timestamptz, '2019-01-05'::timestamptz, '1 minute') as t;
ANALYZE hyper;
DROP TABLE hyper;
--
-- Ensure single query multi-statement command is blocked
--
-- Issue #4818
--
CREATE TABLE disttable(time timestamptz NOT NULL, device int);
SELECT * FROM create_distributed_hypertable('disttable', 'time', 'device');
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
            21 | public      | disttable  | t
(1 row)

CREATE OR REPLACE PROCEDURE test_dist_multi_stmt_command()
LANGUAGE plpgsql AS $$
BEGIN
    EXECUTE 'ANALYZE disttable; ANALYZE disttable';
END
$$;
SET timescaledb.hide_data_node_name_in_errors = 'on';
-- unsupported
\set ON_ERROR_STOP 0
CALL test_dist_multi_stmt_command();
ERROR:  nested commands are not supported on distributed hypertable
\set ON_ERROR_STOP 1
DROP TABLE disttable;
--
-- Test hypertable distributed defaults
--
SHOW timescaledb.hypertable_distributed_default;
 timescaledb.hypertable_distributed_default 
--------------------------------------------
 auto
(1 row)

SHOW timescaledb.hypertable_replication_factor_default;
 timescaledb.hypertable_replication_factor_default 
---------------------------------------------------
 1
(1 row)

/* CASE1: create_hypertable(distributed, replication_factor) */
-- defaults are not applied
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
\set ON_ERROR_STOP 0
SELECT create_hypertable('drf_test', 'time', distributed=>false, replication_factor=>1);
ERROR:  local hypertables cannot set replication_factor
\set ON_ERROR_STOP 1
SELECT create_hypertable('drf_test', 'time', distributed=>true, replication_factor=>1);
   create_hypertable    
------------------------
 (22,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 t              |                  1
(1 row)

DROP TABLE drf_test;
/* CASE2: create_hypertable(distributed) */
-- auto
SET timescaledb.hypertable_distributed_default TO 'auto';
-- create regular hypertable by default
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', distributed=>false);
   create_hypertable    
------------------------
 (23,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 f              |                   
(1 row)

DROP TABLE drf_test;
-- create distributed hypertable using replication factor default
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', distributed=>true);
   create_hypertable    
------------------------
 (24,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 t              |                  1
(1 row)

DROP TABLE drf_test;
-- distributed (same as auto)
SET timescaledb.hypertable_distributed_default TO 'distributed';
-- create regular hypertable by default
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', distributed=>false);
   create_hypertable    
------------------------
 (25,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 f              |                   
(1 row)

DROP TABLE drf_test;
-- create distributed hypertable using replication factor default
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', distributed=>true);
   create_hypertable    
------------------------
 (26,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 t              |                  1
(1 row)

DROP TABLE drf_test;
-- local
SET timescaledb.hypertable_distributed_default TO 'local';
-- unsupported
\set ON_ERROR_STOP 0
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', distributed=>false);
ERROR:  local hypertables cannot set replication_factor
DROP TABLE drf_test;
\set ON_ERROR_STOP 1
-- create distributed hypertable using replication factor default
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', distributed=>true);
   create_hypertable    
------------------------
 (27,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 t              |                  1
(1 row)

DROP TABLE drf_test;
/* CASE3: create_hypertable(replication_factor) */
-- auto
SET timescaledb.hypertable_distributed_default TO 'auto';
-- create distributed hypertable when replication_factor > 0
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', replication_factor=>2);
   create_hypertable    
------------------------
 (28,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 t              |                  2
(1 row)

DROP TABLE drf_test;
-- distributed
SET timescaledb.hypertable_distributed_default TO 'distributed';
-- create distributed hypertable
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', replication_factor=>2);
   create_hypertable    
------------------------
 (29,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 t              |                  2
(1 row)

DROP TABLE drf_test;
-- local
SET timescaledb.hypertable_distributed_default TO 'local';
-- unsupported
\set ON_ERROR_STOP 0
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', replication_factor=>2);
ERROR:  local hypertables cannot set replication_factor
DROP TABLE drf_test;
\set ON_ERROR_STOP 1
-- distributed hypertable member: replication_factor=>-1
\set ON_ERROR_STOP 0
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time', replication_factor=> -1);
ERROR:  local hypertables cannot set replication_factor
DROP TABLE drf_test;
\set ON_ERROR_STOP 1
/* CASE4: create_hypertable() */
-- auto
SET timescaledb.hypertable_distributed_default TO 'auto';
-- regular by default
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time');
   create_hypertable    
------------------------
 (30,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 f              |                   
(1 row)

DROP TABLE drf_test;
-- distributed
SET timescaledb.hypertable_distributed_default TO 'distributed';
-- distributed hypertable with using default replication factor
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time');
   create_hypertable    
------------------------
 (31,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 t              |                  1
(1 row)

DROP TABLE drf_test;
-- local
SET timescaledb.hypertable_distributed_default TO 'distributed';
-- unsupported
\set ON_ERROR_STOP 0
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_hypertable('drf_test', 'time');
   create_hypertable    
------------------------
 (32,public,drf_test,t)
(1 row)

DROP TABLE drf_test;
\set ON_ERROR_STOP 1
/* CASE5: create_distributed_hypertable() default replication factor */
SET timescaledb.hypertable_distributed_default TO 'auto';
SET timescaledb.hypertable_replication_factor_default TO 3;
CREATE TABLE drf_test(time TIMESTAMPTZ NOT NULL);
SELECT create_distributed_hypertable('drf_test', 'time');
 create_distributed_hypertable 
-------------------------------
 (33,public,drf_test,t)
(1 row)

SELECT is_distributed, replication_factor FROM timescaledb_information.hypertables WHERE hypertable_name = 'drf_test';
 is_distributed | replication_factor 
----------------+--------------------
 t              |                  3
(1 row)

DROP TABLE drf_test;
-- test drop_stale_chunks()
--
-- test directly on a data node first
CREATE TABLE dist_test(time timestamptz NOT NULL, device int, temp float);
SELECT create_distributed_hypertable('dist_test', 'time', 'device', 3, replication_factor => 3);
 create_distributed_hypertable 
-------------------------------
 (34,public,dist_test,t)
(1 row)

INSERT INTO dist_test SELECT t, (abs(timestamp_hash(t::timestamp)) % 10) + 1, 0.10 FROM generate_series('2018-03-02 1:00'::TIMESTAMPTZ, '2018-03-08 1:00', '1 hour') t;
SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_34_31_chunk
 _timescaledb_internal._dist_hyper_34_32_chunk
 _timescaledb_internal._dist_hyper_34_33_chunk
 _timescaledb_internal._dist_hyper_34_34_chunk
 _timescaledb_internal._dist_hyper_34_35_chunk
(5 rows)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * from show_chunks('dist_test'); $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_1]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_34_31_chunk
_timescaledb_internal._dist_hyper_34_32_chunk
_timescaledb_internal._dist_hyper_34_33_chunk
_timescaledb_internal._dist_hyper_34_34_chunk
_timescaledb_internal._dist_hyper_34_35_chunk
(5 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_2]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_34_31_chunk
_timescaledb_internal._dist_hyper_34_32_chunk
_timescaledb_internal._dist_hyper_34_33_chunk
_timescaledb_internal._dist_hyper_34_34_chunk
_timescaledb_internal._dist_hyper_34_35_chunk
(5 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_3]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_34_31_chunk
_timescaledb_internal._dist_hyper_34_32_chunk
_timescaledb_internal._dist_hyper_34_33_chunk
_timescaledb_internal._dist_hyper_34_34_chunk
_timescaledb_internal._dist_hyper_34_35_chunk
(5 rows)


 remote_exec 
-------------
 
(1 row)

\c :DATA_NODE_1
-- check call arguments when executed on data node
\set ON_ERROR_STOP 0
SELECT _timescaledb_internal.drop_stale_chunks(NULL, NULL);
ERROR:  chunks argument cannot be NULL
SELECT _timescaledb_internal.drop_stale_chunks('dn1', NULL);
ERROR:  node_name argument cannot be used on the data node
\set ON_ERROR_STOP 1
-- direct call to all chunks other then 19, 21
SELECT id, table_name FROM _timescaledb_catalog.chunk ORDER BY id, table_name;
 id |       table_name        
----+-------------------------
 19 | _dist_hyper_34_31_chunk
 20 | _dist_hyper_34_32_chunk
 21 | _dist_hyper_34_33_chunk
 22 | _dist_hyper_34_34_chunk
 23 | _dist_hyper_34_35_chunk
(5 rows)

SET client_min_messages TO DEBUG1;
SELECT _timescaledb_internal.drop_stale_chunks(NULL, array[19, 21]::integer[]);
LOG:  statement: SELECT _timescaledb_internal.drop_stale_chunks(NULL, array[19, 21]::integer[]);
DEBUG:  dropping chunk _timescaledb_internal._dist_hyper_34_32_chunk
DEBUG:  dropping chunk _timescaledb_internal._dist_hyper_34_34_chunk
DEBUG:  dropping chunk _timescaledb_internal._dist_hyper_34_35_chunk
 drop_stale_chunks 
-------------------
 
(1 row)

RESET client_min_messages;
LOG:  statement: RESET client_min_messages;
SELECT id, table_name FROM _timescaledb_catalog.chunk ORDER BY id, table_name;
 id |       table_name        
----+-------------------------
 19 | _dist_hyper_34_31_chunk
 21 | _dist_hyper_34_33_chunk
(2 rows)

-- ensure that drop_stale_chunks() does not affect local chunks
CREATE TABLE local_test(time timestamptz NOT NULL, device int, temp float);
SELECT create_hypertable('local_test', 'time', 'device', 3);
    create_hypertable     
--------------------------
 (31,public,local_test,t)
(1 row)

INSERT INTO local_test SELECT t, (abs(timestamp_hash(t::timestamp)) % 10) + 1, 0.10 FROM generate_series('2018-03-02 1:00'::TIMESTAMPTZ, '2018-03-08 1:00', '1 hour') t;
SELECT * from show_chunks('local_test');
               show_chunks                
------------------------------------------
 _timescaledb_internal._hyper_31_24_chunk
 _timescaledb_internal._hyper_31_25_chunk
 _timescaledb_internal._hyper_31_26_chunk
 _timescaledb_internal._hyper_31_27_chunk
 _timescaledb_internal._hyper_31_28_chunk
(5 rows)

SELECT id, table_name FROM _timescaledb_catalog.chunk ORDER BY id, table_name;
 id |       table_name        
----+-------------------------
 19 | _dist_hyper_34_31_chunk
 21 | _dist_hyper_34_33_chunk
 24 | _hyper_31_24_chunk
 25 | _hyper_31_25_chunk
 26 | _hyper_31_26_chunk
 27 | _hyper_31_27_chunk
 28 | _hyper_31_28_chunk
(7 rows)

SET client_min_messages TO DEBUG1;
SELECT _timescaledb_internal.drop_stale_chunks(NULL, array[19]::integer[]);
LOG:  statement: SELECT _timescaledb_internal.drop_stale_chunks(NULL, array[19]::integer[]);
DEBUG:  dropping chunk _timescaledb_internal._dist_hyper_34_33_chunk
 drop_stale_chunks 
-------------------
 
(1 row)

RESET client_min_messages;
LOG:  statement: RESET client_min_messages;
SELECT * from show_chunks('local_test');
               show_chunks                
------------------------------------------
 _timescaledb_internal._hyper_31_24_chunk
 _timescaledb_internal._hyper_31_25_chunk
 _timescaledb_internal._hyper_31_26_chunk
 _timescaledb_internal._hyper_31_27_chunk
 _timescaledb_internal._hyper_31_28_chunk
(5 rows)

SELECT id, table_name FROM _timescaledb_catalog.chunk ORDER BY id, table_name;
 id |       table_name        
----+-------------------------
 19 | _dist_hyper_34_31_chunk
 24 | _hyper_31_24_chunk
 25 | _hyper_31_25_chunk
 26 | _hyper_31_26_chunk
 27 | _hyper_31_27_chunk
 28 | _hyper_31_28_chunk
(6 rows)

DROP TABLE local_test;
\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
DROP TABLE dist_test;
-- test from access node
CREATE TABLE dist_test(time timestamptz NOT NULL, device int, temp float);
SELECT create_distributed_hypertable('dist_test', 'time', 'device', 3, replication_factor => 3);
 create_distributed_hypertable 
-------------------------------
 (35,public,dist_test,t)
(1 row)

INSERT INTO dist_test SELECT t, (abs(timestamp_hash(t::timestamp)) % 10) + 1, 0.10 FROM generate_series('2018-03-02 1:00'::TIMESTAMPTZ, '2018-03-08 1:00', '1 hour') t;
SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_35_36_chunk
 _timescaledb_internal._dist_hyper_35_37_chunk
 _timescaledb_internal._dist_hyper_35_38_chunk
 _timescaledb_internal._dist_hyper_35_39_chunk
 _timescaledb_internal._dist_hyper_35_40_chunk
(5 rows)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * from show_chunks('dist_test'); $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_1]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_36_chunk
_timescaledb_internal._dist_hyper_35_37_chunk
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(5 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_2]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_36_chunk
_timescaledb_internal._dist_hyper_35_37_chunk
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(5 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_3]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_36_chunk
_timescaledb_internal._dist_hyper_35_37_chunk
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(5 rows)


 remote_exec 
-------------
 
(1 row)

-- check call arguments when executed on access node
\set ON_ERROR_STOP 0
SELECT _timescaledb_internal.drop_stale_chunks( NULL, NULL);
ERROR:  node_name argument cannot be NULL
SELECT _timescaledb_internal.drop_stale_chunks(NULL, array[1,2,3]);
ERROR:  node_name argument cannot be NULL
\set ON_ERROR_STOP 1
-- create stale chunk by dropping them from access node
DROP FOREIGN TABLE _timescaledb_internal._dist_hyper_35_36_chunk;
DROP FOREIGN TABLE _timescaledb_internal._dist_hyper_35_37_chunk;
SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_35_38_chunk
 _timescaledb_internal._dist_hyper_35_39_chunk
 _timescaledb_internal._dist_hyper_35_40_chunk
(3 rows)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * from show_chunks('dist_test'); $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_1]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_36_chunk
_timescaledb_internal._dist_hyper_35_37_chunk
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(5 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_2]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_36_chunk
_timescaledb_internal._dist_hyper_35_37_chunk
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(5 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_3]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_36_chunk
_timescaledb_internal._dist_hyper_35_37_chunk
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(5 rows)


 remote_exec 
-------------
 
(1 row)

---- drop stale chunks 36, 37 on data nodes
SELECT _timescaledb_internal.drop_stale_chunks(:'DATA_NODE_1');
 drop_stale_chunks 
-------------------
 
(1 row)

SELECT _timescaledb_internal.drop_stale_chunks(:'DATA_NODE_2');
 drop_stale_chunks 
-------------------
 
(1 row)

SELECT _timescaledb_internal.drop_stale_chunks(:'DATA_NODE_3');
 drop_stale_chunks 
-------------------
 
(1 row)

SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_35_38_chunk
 _timescaledb_internal._dist_hyper_35_39_chunk
 _timescaledb_internal._dist_hyper_35_40_chunk
(3 rows)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * from show_chunks('dist_test'); $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_1]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(3 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_2]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(3 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_3]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(3 rows)


 remote_exec 
-------------
 
(1 row)

-- test drop_stale_chunks() with compressed chunk
ALTER TABLE dist_test set (timescaledb.compress, timescaledb.compress_segmentby = 'device', timescaledb.compress_orderby = 'time');
SELECT compress_chunk('_timescaledb_internal._dist_hyper_35_38_chunk');
                compress_chunk                 
-----------------------------------------------
 _timescaledb_internal._dist_hyper_35_38_chunk
(1 row)

\c :DATA_NODE_1
SELECT id, table_name FROM _timescaledb_catalog.chunk ORDER BY id, table_name;
 id |         table_name         
----+----------------------------
 31 | _dist_hyper_35_38_chunk
 32 | _dist_hyper_35_39_chunk
 33 | _dist_hyper_35_40_chunk
 34 | compress_hyper_33_34_chunk
 35 | compress_hyper_33_35_chunk
 36 | compress_hyper_33_36_chunk
(6 rows)

SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_35_38_chunk
 _timescaledb_internal._dist_hyper_35_39_chunk
 _timescaledb_internal._dist_hyper_35_40_chunk
(3 rows)

\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
DROP FOREIGN TABLE _timescaledb_internal._dist_hyper_35_38_chunk;
SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_35_39_chunk
 _timescaledb_internal._dist_hyper_35_40_chunk
(2 rows)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * from show_chunks('dist_test'); $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_1]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(3 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_2]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(3 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_3]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_35_38_chunk
_timescaledb_internal._dist_hyper_35_39_chunk
_timescaledb_internal._dist_hyper_35_40_chunk
(3 rows)


 remote_exec 
-------------
 
(1 row)

-- drop stale chunk 38
SELECT _timescaledb_internal.drop_stale_chunks(:'DATA_NODE_1');
 drop_stale_chunks 
-------------------
 
(1 row)

SELECT _timescaledb_internal.drop_stale_chunks(:'DATA_NODE_2');
 drop_stale_chunks 
-------------------
 
(1 row)

SELECT _timescaledb_internal.drop_stale_chunks(:'DATA_NODE_3');
 drop_stale_chunks 
-------------------
 
(1 row)

\c :DATA_NODE_1
SELECT id, table_name FROM _timescaledb_catalog.chunk ORDER BY id, table_name;
 id |         table_name         
----+----------------------------
 32 | _dist_hyper_35_39_chunk
 33 | _dist_hyper_35_40_chunk
 35 | compress_hyper_33_35_chunk
 36 | compress_hyper_33_36_chunk
(4 rows)

SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_35_39_chunk
 _timescaledb_internal._dist_hyper_35_40_chunk
(2 rows)

\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
DROP TABLE dist_test;
-- test alter_data_node() auto drop stale chunks on available
--
CREATE TABLE dist_test(time timestamptz NOT NULL, device int, temp float);
SELECT create_distributed_hypertable('dist_test', 'time', 'device', 3, replication_factor => 3);
 create_distributed_hypertable 
-------------------------------
 (36,public,dist_test,t)
(1 row)

INSERT INTO dist_test SELECT t, (abs(timestamp_hash(t::timestamp)) % 10) + 1, 0.10 FROM generate_series('2018-03-02 1:00'::TIMESTAMPTZ, '2018-03-08 1:00', '1 hour') t;
SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_36_41_chunk
 _timescaledb_internal._dist_hyper_36_42_chunk
 _timescaledb_internal._dist_hyper_36_43_chunk
 _timescaledb_internal._dist_hyper_36_44_chunk
 _timescaledb_internal._dist_hyper_36_45_chunk
(5 rows)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * from show_chunks('dist_test'); $$);
NOTICE:  [db_dist_ddl_1]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_1]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_36_41_chunk
_timescaledb_internal._dist_hyper_36_42_chunk
_timescaledb_internal._dist_hyper_36_43_chunk
_timescaledb_internal._dist_hyper_36_44_chunk
_timescaledb_internal._dist_hyper_36_45_chunk
(5 rows)


NOTICE:  [db_dist_ddl_2]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_2]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_36_41_chunk
_timescaledb_internal._dist_hyper_36_42_chunk
_timescaledb_internal._dist_hyper_36_43_chunk
_timescaledb_internal._dist_hyper_36_44_chunk
_timescaledb_internal._dist_hyper_36_45_chunk
(5 rows)


NOTICE:  [db_dist_ddl_3]:  SELECT * from show_chunks('dist_test')
NOTICE:  [db_dist_ddl_3]:
show_chunks                                  
---------------------------------------------
_timescaledb_internal._dist_hyper_36_41_chunk
_timescaledb_internal._dist_hyper_36_42_chunk
_timescaledb_internal._dist_hyper_36_43_chunk
_timescaledb_internal._dist_hyper_36_44_chunk
_timescaledb_internal._dist_hyper_36_45_chunk
(5 rows)


 remote_exec 
-------------
 
(1 row)

SELECT alter_data_node(:'DATA_NODE_1', available => false);
                 alter_data_node                 
-------------------------------------------------
 (db_dist_ddl_1,localhost,55432,db_dist_ddl_1,f)
(1 row)

-- create stale chunks
DROP FOREIGN TABLE _timescaledb_internal._dist_hyper_36_41_chunk;
DROP FOREIGN TABLE _timescaledb_internal._dist_hyper_36_42_chunk;
\c :DATA_NODE_1
SELECT id, table_name FROM _timescaledb_catalog.chunk ORDER BY id, table_name;
 id |       table_name        
----+-------------------------
 37 | _dist_hyper_36_41_chunk
 38 | _dist_hyper_36_42_chunk
 39 | _dist_hyper_36_43_chunk
 40 | _dist_hyper_36_44_chunk
 41 | _dist_hyper_36_45_chunk
(5 rows)

SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_36_41_chunk
 _timescaledb_internal._dist_hyper_36_42_chunk
 _timescaledb_internal._dist_hyper_36_43_chunk
 _timescaledb_internal._dist_hyper_36_44_chunk
 _timescaledb_internal._dist_hyper_36_45_chunk
(5 rows)

\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
-- drop stale chunks by making data node available
SELECT alter_data_node(:'DATA_NODE_1', available => true);
                 alter_data_node                 
-------------------------------------------------
 (db_dist_ddl_1,localhost,55432,db_dist_ddl_1,t)
(1 row)

\c :DATA_NODE_1
SELECT id, table_name FROM _timescaledb_catalog.chunk ORDER BY id, table_name;
 id |       table_name        
----+-------------------------
 39 | _dist_hyper_36_43_chunk
 40 | _dist_hyper_36_44_chunk
 41 | _dist_hyper_36_45_chunk
(3 rows)

SELECT * from show_chunks('dist_test');
                  show_chunks                  
-----------------------------------------------
 _timescaledb_internal._dist_hyper_36_43_chunk
 _timescaledb_internal._dist_hyper_36_44_chunk
 _timescaledb_internal._dist_hyper_36_45_chunk
(3 rows)

\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
DROP TABLE dist_test;
-- cleanup
\c :TEST_DBNAME :ROLE_CLUSTER_SUPERUSER;
DROP DATABASE :DATA_NODE_1;
DROP DATABASE :DATA_NODE_2;
DROP DATABASE :DATA_NODE_3;
